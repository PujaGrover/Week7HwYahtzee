using System;

namespace Week7HwYahtzee
{
    class Program
    {
        int[] diceHoldOrRoll = new int[5] { 0, 0, 0, 0, 0 };
        static void Main(string[] args)
        {
            /*PROBLEM STATEMENT
             *
             * Our version of Yahtzee is going to be a simpler than the official game.
             * In our game, you will roll 5 dice and ask the user which rolls they want to keep.
             * You will then roll the other dice and ask the user which dice they want to keep again. 
             * You will then roll the remaining dice one last time. 
             * Add up the number of the dice that was rolled the most.
               For example, if a user ends up with a 6, 4, 3, 3, 3 the score would be 3.
               If the user rolls 5, 5, 4, 3, 3 the score would be 2.
               Next the computer rolls 3 times.Each time record the number of die that was rolled the most. 
               Only keep the highest score.
               For example, the computer rolls 6,5,4,4,2 
               on the first roll, 1,1,1,3,5 on the second roll 
               and 6, 6, 5, 4, 3 on the third roll.  
               The computer score is 3 because the second roll had 3 matching dice.
               Print the winner with the tie going to the player.
               */

            Console.WriteLine("-------LET'S PLAY YAHTZEE-------");

            //Create and initialize an int array that will hold the dice roll results generated by random generator
            //This int array 'userDiceRoll_FirstTime' will be used as the Master array for the User
            int[] userDiceRoll_FirstTime = new int[5];

            //Create and initialize a master array of size 5 with 0's. When the user wants to hold dice we replace 0 by 1
            int[] diceHoldOrRoll = new int[5] { 0, 0, 0, 0, 0 };

            //Start the User First Roll : all 5 dice rolls
            userDiceRoll_FirstTime = DiceRoll(5);

            //Show the roll to the user
            for (int i = 0; i < userDiceRoll_FirstTime.Length; i++)
            {
                Console.WriteLine($"Dice{i + 1}) { userDiceRoll_FirstTime[i]}" + "     ");
            }

            //Ask user which dice they would like to hold
            Console.WriteLine("Which dice would you like to hold(seperate your choice with a comma):");

            //Create an array  to store user input for holding dice
            string userDiceHold_FirstTime = Console.ReadLine();

            //check if user does not want to hold any dice 
            if (!string.IsNullOrWhiteSpace(userDiceHold_FirstTime))
            {
                //Console.WriteLine(userDiceHold_FirstTime);
                string[] userDiceHold_FirstTime_StringArray = userDiceHold_FirstTime.Trim().Split(",");

                //Update master hold or roll array to include dice on hold as per user input
                for (int i = 0; i < userDiceHold_FirstTime_StringArray.Length; i++)
                {
                    int diceHoldIndex;
                    // check if user input is a string instead of an integer
                    if (int.TryParse(userDiceHold_FirstTime_StringArray[i], out diceHoldIndex))
                    {
                        diceHoldIndex = int.Parse(userDiceHold_FirstTime_StringArray[i]) - 1;

                        //check user input to verify that user did not enter a number >5 ot <1
                        if (diceHoldIndex < 5 && diceHoldIndex >= 0)
                        {
                            diceHoldOrRoll[diceHoldIndex] = 1;
                        }
                        else
                            Console.WriteLine("Invalid Input - out of range. Continuing with next roll");
                    }
                    else
                    {
                        Console.WriteLine("Invalid Input - input not a number. Continuing with next roll");
                    }
                }

                ////For Debugging Purpose
                ////Print which positions are on hold, along with the values, from the array which stores the user input
                //for (int i = 0; i < userDiceHold_FirstTimeIntArray.Length; i++)
                //{
                //    Console.WriteLine($"Dice {int.Parse(userDiceHold_FirstTime_StringArray[i])}) {userDiceHold_FirstTimeIntArray[i]}" + " " + "HOLD");
                //}

                //For Debugging Purpose: printing the array which stores the positions that are on hold or roll
                //foreach (int n in diceHoldOrRoll)
                //{
                //    Console.WriteLine($"diceHoldOrRollArray: " + n);
                //}

                //Displaying Which dice are on 'HOLD' and which are to be rolled using diceHoldOrRoll[] and userDiceRoll_FirstTime[]
                for (int i = 0; i < 5; i++)
                {
                    Console.Write($"Dice{i + 1}) { userDiceRoll_FirstTime[i]}" + "     ");

                    if (diceHoldOrRoll[i] == 1)
                        Console.WriteLine("HOLD");
                    else
                    {
                        Console.WriteLine("To be Rolled again");
                    }
                }
                Console.ReadLine();
            }
            else
            { 
                 Console.WriteLine("No Hold requested. Continuing with next roll");
                 Console.ReadLine();
            }
            
            
            // Start User Roll 2
            Console.WriteLine("User Roll 2");

            //Generate new random numbers for the count of dice which are not on Hold, and update master user dice roll array
            for (int i = 0;i < 5; i++)
            {
                if (diceHoldOrRoll[i] == 0)
                {
                    userDiceRoll_FirstTime[i] = new Random().Next(1,7);
                }
            }
            //Printing Dice Roll 2 Results
            for (int i = 0; i < 5; i++)
            {
                Console.Write($"Dice{i + 1}) { userDiceRoll_FirstTime[i]}" + "     ");

                if (diceHoldOrRoll[i] == 1)
                    Console.WriteLine("HOLD");
                else
                {
                    Console.WriteLine("Rolled");
                }
            }
            Console.ReadLine();

            //Ask user which dice they would like to hold
            Console.WriteLine("Which dice would you like to hold from the 'Rolled' dices (seperate your choice with a comma):");

            //Create an array  to store user second input for holding dice
            string userDiceHold_SecondTime = Console.ReadLine();

            //check if user does not want to hold any dice 
            if (!string.IsNullOrWhiteSpace(userDiceHold_SecondTime))
            {

                //Console.WriteLine(userDiceHold_SecondTime);
                string[] userDiceHold_SecondTime_StringArray = userDiceHold_SecondTime.Trim().Split(",");

                //Update master hold or roll array to include dice on hold as per user input
                for (int i = 0; i < userDiceHold_SecondTime_StringArray.Length; i++)
                {
                    int diceHoldIndex;
                    // check if user input is a string instead of an integer
                    if (int.TryParse(userDiceHold_SecondTime_StringArray[i], out diceHoldIndex))
                    {
                        diceHoldIndex = int.Parse(userDiceHold_SecondTime_StringArray[i]) - 1;

                        //check user input to verify that user did not enter a number >5 ot <1

                        if (diceHoldIndex < 5 && diceHoldIndex >= 0)
                        {
                            diceHoldOrRoll[diceHoldIndex] = 1;
                        }
                        else
                            Console.WriteLine("Invalid Input. Continuing with next roll");
                    }
                    else
                    {
                        Console.WriteLine("Invalid Input - input not a number. Continuing with next roll");
                    }
                }
                //For Debugging Purpose: printing the array which stores the positions that are on hold or roll
                //foreach (int n in diceHoldOrRoll)
                //{
                //    Console.WriteLine($"diceHoldOrRollArray: " + n);
                //}

                //Displaying Which dice are on 'HOLD' and which are to be rolled using diceHoldOrRoll[] and userDiceRoll_FirstTime[]
                for (int i = 0; i < 5; i++)
                {
                    Console.Write($"Dice{i + 1}) { userDiceRoll_FirstTime[i]}" + "     ");

                    if (diceHoldOrRoll[i] == 1)
                        Console.WriteLine("HOLD");
                    else
                    {
                        Console.WriteLine("To be Rolled again");
                    }
                }
                Console.ReadLine();
            }
            else
            {
                Console.WriteLine("No Hold requested. Continuing with next roll");
                //Console.ReadLine();
            }

            // Start User Roll 3
            Console.WriteLine("User Roll 3");

            //Generate new random numbers for the count of dice which are not on Hold, and update master user dice roll array
            for (int i = 0; i < 5; i++)
            {
                if (diceHoldOrRoll[i] == 0)
                {
                    userDiceRoll_FirstTime[i] = new Random().Next(1, 7);
                }
            }
            //Printing Dice Roll 3 Results
            for (int i = 0; i < 5; i++)
            {
                Console.Write($"Dice{i + 1}) { userDiceRoll_FirstTime[i]}" + "     ");

                if (diceHoldOrRoll[i] == 1)
                    Console.WriteLine("HOLD");
                else
                {
                    Console.WriteLine("Rolled");
                }
            }
            Console.ReadLine();

            // Calculate User Score by calling Calculate Score Method
            int userScore = CalculateScore(userDiceRoll_FirstTime);
            Console.WriteLine("You played well! Your score is: " + userScore);
            Console.ReadLine();

            // Computer's turn to roll the dices 3 times

            //Computer Roll 1
            Console.WriteLine("Computer Roll 1");
            int[] computerRoll_FirstTime = DiceRoll(5);

            //print the array of rolled dices
            for (int i = 0; i < computerRoll_FirstTime.Length; i++)
            {
                Console.WriteLine($"Dice{i + 1}) { computerRoll_FirstTime[i]}" + "     ");
            }

            //Call method to get computer Score1
            int computerScore1 = CalculateScore(computerRoll_FirstTime);

            Console.WriteLine("Computer Score 1 = " + computerScore1);

            //Computer Roll 2
            Console.WriteLine("Computer Roll 2");
            int[] computerRoll_SecondTime = DiceRoll(5);

            //print the array of rolled dices
            for (int i = 0; i < computerRoll_SecondTime.Length; i++)
            {
                Console.WriteLine($"Dice{i + 1}) { computerRoll_SecondTime[i]}" + "     ");
            }

            //Call method to get computer Score2
            int computerScore2 = CalculateScore(computerRoll_SecondTime);

            Console.WriteLine("Computer Score 2 = " + computerScore2);

            //Computer Roll 3
            Console.WriteLine("Computer Roll 3");
            int[] computerRoll_ThirdTime = DiceRoll(5);

            //print the array of rolled dices
            for (int i = 0; i < computerRoll_ThirdTime.Length; i++)
            {
                Console.WriteLine($"Dice{i + 1}) { computerRoll_ThirdTime[i]}" + "     ");
            }

            //Call method to get computer Score3
            int computerScore3 = CalculateScore(computerRoll_ThirdTime);

            Console.WriteLine("Computer Score 3 = " + computerScore3);

            //Compare three scores of computer to get the highest score for computer
            int computerScore = computerScore1;
            if (computerScore2 > computerScore)
                computerScore = computerScore2;
            if (computerScore3 > computerScore)
                computerScore = computerScore3;
            Console.WriteLine("Computer Score is " + computerScore);
            Console.ReadLine();

            // Determine the winner by comparing the user score and highest computer score

            if (userScore > computerScore)
                Console.WriteLine("You Win!!");
            else if (userScore < computerScore)
                Console.WriteLine("Computer Wins!!");
            else
                Console.WriteLine("Its a Draw!!");

            Console.ReadLine();
        }

        // DiceRoll Method returns an array of random integers whose value lies between 1 and 6. 
        // Size of array is as per the parameter passed into this method
        public static int[] DiceRoll(int numberOfDiceRolls)
        {
            int[] diceRoll = new int[numberOfDiceRolls];
            for (int i = 0; i < numberOfDiceRolls; i++)
            {
                diceRoll[i] = new Random().Next(1, 7);
            }
            return diceRoll;
        }

        // Method to Calculate Score
        public static int CalculateScore(int[] diceRoll)
        {       
        //Declare an int variable 'maxCount' to keep track of most rolled dice
        int maxCount = 0;
            for (int i = 0; i< 5; i++)
            {
                int valueToBeChecked = diceRoll[i];
                int valueToBeCheckedCounter = 0;

                //For Debugging Purpose
                //Console.WriteLine("valueToBeChecked: " + valueToBeChecked);

                for (int j = 0; j< 5; j++)
                {
                    if (valueToBeChecked == diceRoll[j])
                    {
                        valueToBeCheckedCounter++;
                    }

   
                    if (valueToBeCheckedCounter > maxCount)
                        maxCount = valueToBeCheckedCounter;

                }

                //For Debugging Purpose
                //Console.WriteLine("valueToBeCheckedCounter: " + valueToBeCheckedCounter);

                //For Debugging Purpose
                //Console.WriteLine("maxCount: " + maxCount);

            }
            //For Debugging Purpose
            //Console.WriteLine("Score is: " + maxCount);
            //Console.ReadLine();

            //return the score
            return maxCount;

        }

        //ALGORITHM

        //Create and initialize an int array that will hold the dice roll results generated by random generator
        //This int array 'userDiceRoll_FirstTime' will be used as the Master array for the User
        //Create and initialize a master int array of size 5 with 0's. When the user wants to hold dice we replace 0 by 1

        //User Roll 1

        //Start the User First Roll : all 5 dice rolls
        //Show the roll to the user
        //Ask user which dice they would like to hold
        //Create an array  to store user input for holding dice
        //check if user does not want to hold any dice 
        //Update master hold or roll array to include dice on hold as per user input
        // check if user input is a string instead of an integer
        //Displaying Which dice are on 'HOLD' and which are to be rolled using diceHoldOrRoll[] and userDiceRoll_FirstTime[]


        // Start User Roll 2

        //Generate new random numbers for the count of dice which are not on Hold, and update master user dice roll array
        //Printing Dice Roll 2 Results
        //Ask user which dice they would like to hold
        //Create an array  to store user second input for holding dice
        //check if user does not want to hold any dice 
        //Update master hold or roll array to include dice on hold as per user input
        // check if user input is a string instead of an integer
        //Displaying Which dice are on 'HOLD' and which are to be rolled using diceHoldOrRoll[] and userDiceRoll_FirstTime[]

        // Start User Roll 3

        //Generate new random numbers for the count of dice which are not on Hold, and update master user dice roll array
        //Printing Dice Roll 3 Results

        // Calculate Use Score using final 5 values of user

        // Computer's turn to roll the dices 3 times

        //Computer Roll 1

        //Start Computer Roll 1 by calling dice roll method
        //print the array of rolled dices
        //Call method to get computer Score1

        //Computer Roll 2

        // Start the Computer Roll 2 by calling dice roll method
        //print the array of rolled dices
        //Call method to get computer Score2

        //Computer Roll 3

        // Start the Computer Roll 3 by calling dice roll method
        //print the array of rolled dices
        //Call method to get computer Score3


        // Determine the computer score by comparing scores from Roll 1, 2 and 3

        // Determine the winner by comparing the user score and the computer score


    }
}


